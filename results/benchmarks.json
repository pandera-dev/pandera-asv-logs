{
    "dataframe_schema.Decorators.mem_check_input": {
        "code": "class Decorators:\n    def mem_check_input(self):\n        @check_input(self.in_schema)\n        def transform_first_arg(self):\n            return Decorators.transformer(self.df)\n\n    def setup(self):\n        self.in_schema = DataFrameSchema({\"column1\": Column(String)})\n        self.out_schema = DataFrameSchema({\"column2\": Column(Int)})\n        self.df = pd.DataFrame({\"column1\": [\"a\", \"b\", \"c\"]})",
        "name": "dataframe_schema.Decorators.mem_check_input",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "memory",
        "unit": "bytes",
        "version": "3ea697ffff289f33f269332640cc7c528ffb275ef229da091c885b11e28ccd49"
    },
    "dataframe_schema.Decorators.mem_check_output": {
        "code": "class Decorators:\n    def mem_check_output(self):\n        @check_output(self.out_schema)\n        def transform_first_arg(self):\n            return Decorators.transformer(self.df)\n\n    def setup(self):\n        self.in_schema = DataFrameSchema({\"column1\": Column(String)})\n        self.out_schema = DataFrameSchema({\"column2\": Column(Int)})\n        self.df = pd.DataFrame({\"column1\": [\"a\", \"b\", \"c\"]})",
        "name": "dataframe_schema.Decorators.mem_check_output",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "memory",
        "unit": "bytes",
        "version": "ed1435e8c6947a3d94dadfc85eee5581e5d195fd29a0e91f51e231c59aeb4fee"
    },
    "dataframe_schema.Decorators.peakmem_check_input": {
        "code": "class Decorators:\n    def peakmem_check_input(self):\n        @check_input(self.in_schema)\n        def transform_first_arg(self):\n            return Decorators.transformer(self.df)\n\n    def setup(self):\n        self.in_schema = DataFrameSchema({\"column1\": Column(String)})\n        self.out_schema = DataFrameSchema({\"column2\": Column(Int)})\n        self.df = pd.DataFrame({\"column1\": [\"a\", \"b\", \"c\"]})",
        "name": "dataframe_schema.Decorators.peakmem_check_input",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "67ded5ba2108b9bca264b48b535548b68b5199261d5b146163a37ce6d914ca74"
    },
    "dataframe_schema.Decorators.peakmem_check_output": {
        "code": "class Decorators:\n    def peakmem_check_output(self):\n        @check_output(self.out_schema)\n        def transform_first_arg(self):\n            return Decorators.transformer(self.df)\n\n    def setup(self):\n        self.in_schema = DataFrameSchema({\"column1\": Column(String)})\n        self.out_schema = DataFrameSchema({\"column2\": Column(Int)})\n        self.df = pd.DataFrame({\"column1\": [\"a\", \"b\", \"c\"]})",
        "name": "dataframe_schema.Decorators.peakmem_check_output",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "45dd4f4c48273b8c1d0f837e81679ee4d0e1995c327206276cc32743368842e9"
    },
    "dataframe_schema.Decorators.time_check_input": {
        "code": "class Decorators:\n    def time_check_input(self):\n        @check_input(self.in_schema)\n        def transform_first_arg(self):\n            return Decorators.transformer(self.df)\n\n    def setup(self):\n        self.in_schema = DataFrameSchema({\"column1\": Column(String)})\n        self.out_schema = DataFrameSchema({\"column2\": Column(Int)})\n        self.df = pd.DataFrame({\"column1\": [\"a\", \"b\", \"c\"]})",
        "min_run_count": 2,
        "name": "dataframe_schema.Decorators.time_check_input",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4fd77a899e76c5aa41154a6ce315111de59d38e5e6412f7fca3ee4d153f8c32b",
        "warmup_time": -1
    },
    "dataframe_schema.Decorators.time_check_output": {
        "code": "class Decorators:\n    def time_check_output(self):\n        @check_output(self.out_schema)\n        def transform_first_arg(self):\n            return Decorators.transformer(self.df)\n\n    def setup(self):\n        self.in_schema = DataFrameSchema({\"column1\": Column(String)})\n        self.out_schema = DataFrameSchema({\"column2\": Column(Int)})\n        self.df = pd.DataFrame({\"column1\": [\"a\", \"b\", \"c\"]})",
        "min_run_count": 2,
        "name": "dataframe_schema.Decorators.time_check_output",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f7514d87e969c54d82e4997e96d35fabe056e5ae18b83a6767b5cd62df9d4494",
        "warmup_time": -1
    },
    "dataframe_schema.Validate.mem_df_schema": {
        "code": "class Validate:\n    def mem_df_schema(self):\n         self.schema.validate(self.df)\n\n    def setup(self):\n        self.schema = DataFrameSchema(\n                {\n                    \"a\": Column(Int),\n                    \"b\": Column(Float),\n                    \"c\": Column(String),\n                    \"d\": Column(Bool),\n                    \"e\": Column(Category),\n                    \"f\": Column(Object),\n                    \"g\": Column(DateTime),\n                    \"i\": Column(Timedelta),\n                    },\n                )\n        self.df = pd.DataFrame(\n                {\n                    \"a\": [1, 2, 3],\n                    \"b\": [1.1, 2.5, 9.9],\n                    \"c\": [\"z\", \"y\", \"x\"],\n                    \"d\": [True, True, False],\n                    \"e\": pd.Series([\"c2\", \"c1\", \"c3\"], dtype=\"category\"),\n                    \"f\": [(3,), (2,), (1,)],\n                    \"g\": [pd.Timestamp(\"2015-02-01\"),\n                          pd.Timestamp(\"2015-02-02\"),\n                          pd.Timestamp(\"2015-02-03\")],\n                    \"i\": [pd.Timedelta(1, unit=\"D\"),\n                          pd.Timedelta(5, unit=\"D\"),\n                          pd.Timedelta(9, unit=\"D\")]\n                    })",
        "name": "dataframe_schema.Validate.mem_df_schema",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "memory",
        "unit": "bytes",
        "version": "23089f5ca9c3daebe660e72445237be641594be9680900994f53cfe47fc85d4a"
    },
    "dataframe_schema.Validate.peakmem_df_schema": {
        "code": "class Validate:\n    def peakmem_df_schema(self):\n         self.schema.validate(self.df)\n\n    def setup(self):\n        self.schema = DataFrameSchema(\n                {\n                    \"a\": Column(Int),\n                    \"b\": Column(Float),\n                    \"c\": Column(String),\n                    \"d\": Column(Bool),\n                    \"e\": Column(Category),\n                    \"f\": Column(Object),\n                    \"g\": Column(DateTime),\n                    \"i\": Column(Timedelta),\n                    },\n                )\n        self.df = pd.DataFrame(\n                {\n                    \"a\": [1, 2, 3],\n                    \"b\": [1.1, 2.5, 9.9],\n                    \"c\": [\"z\", \"y\", \"x\"],\n                    \"d\": [True, True, False],\n                    \"e\": pd.Series([\"c2\", \"c1\", \"c3\"], dtype=\"category\"),\n                    \"f\": [(3,), (2,), (1,)],\n                    \"g\": [pd.Timestamp(\"2015-02-01\"),\n                          pd.Timestamp(\"2015-02-02\"),\n                          pd.Timestamp(\"2015-02-03\")],\n                    \"i\": [pd.Timedelta(1, unit=\"D\"),\n                          pd.Timedelta(5, unit=\"D\"),\n                          pd.Timedelta(9, unit=\"D\")]\n                    })",
        "name": "dataframe_schema.Validate.peakmem_df_schema",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "5ea67a5ea14055b175ca1cf4c7f3b213f9057da562d6baebaccb8b667c31ecc4"
    },
    "dataframe_schema.Validate.time_df_schema": {
        "code": "class Validate:\n    def time_df_schema(self):\n        self.schema.validate(self.df)\n\n    def setup(self):\n        self.schema = DataFrameSchema(\n                {\n                    \"a\": Column(Int),\n                    \"b\": Column(Float),\n                    \"c\": Column(String),\n                    \"d\": Column(Bool),\n                    \"e\": Column(Category),\n                    \"f\": Column(Object),\n                    \"g\": Column(DateTime),\n                    \"i\": Column(Timedelta),\n                    },\n                )\n        self.df = pd.DataFrame(\n                {\n                    \"a\": [1, 2, 3],\n                    \"b\": [1.1, 2.5, 9.9],\n                    \"c\": [\"z\", \"y\", \"x\"],\n                    \"d\": [True, True, False],\n                    \"e\": pd.Series([\"c2\", \"c1\", \"c3\"], dtype=\"category\"),\n                    \"f\": [(3,), (2,), (1,)],\n                    \"g\": [pd.Timestamp(\"2015-02-01\"),\n                          pd.Timestamp(\"2015-02-02\"),\n                          pd.Timestamp(\"2015-02-03\")],\n                    \"i\": [pd.Timedelta(1, unit=\"D\"),\n                          pd.Timedelta(5, unit=\"D\"),\n                          pd.Timedelta(9, unit=\"D\")]\n                    })",
        "min_run_count": 2,
        "name": "dataframe_schema.Validate.time_df_schema",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2f71e2645cea81a3ce8fb632321fb122d7b758bb153c1098bcd3dc35acd12b87",
        "warmup_time": -1
    },
    "series_schema.Validate.mem_series_schema": {
        "code": "class Validate:\n    def mem_series_schema(self):\n         self.schema.validate(self.series)\n\n    def setup(self):\n        self.schema = SeriesSchema(\n                String,\n                checks=[\n                    Check(lambda s: s.str.startswith(\"foo\")),\n                    Check(lambda s: s.str.endswith(\"bar\")),\n                    Check(lambda x: len(x) > 3, element_wise=True)\n                    ],\n                nullable=False,\n                allow_duplicates=True,\n                name=\"my_series\")\n        self.series = pd.Series([\"foobar\", \"foobar\", \"foobar\"],\n                                name=\"my_series\")",
        "name": "series_schema.Validate.mem_series_schema",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "memory",
        "unit": "bytes",
        "version": "d640c3be054a1d4dd88af6aac36c6b9c3e1ae4811dba553777e4854e0b940521"
    },
    "series_schema.Validate.peakmem_series_schema": {
        "code": "class Validate:\n    def peakmem_series_schema(self):\n         self.schema.validate(self.series)\n\n    def setup(self):\n        self.schema = SeriesSchema(\n                String,\n                checks=[\n                    Check(lambda s: s.str.startswith(\"foo\")),\n                    Check(lambda s: s.str.endswith(\"bar\")),\n                    Check(lambda x: len(x) > 3, element_wise=True)\n                    ],\n                nullable=False,\n                allow_duplicates=True,\n                name=\"my_series\")\n        self.series = pd.Series([\"foobar\", \"foobar\", \"foobar\"],\n                                name=\"my_series\")",
        "name": "series_schema.Validate.peakmem_series_schema",
        "param_names": [],
        "params": [],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "69f2d835b0e4ff61ca789892cb0f3df2f517640816c1dbe6df7419c13760c341"
    },
    "series_schema.Validate.time_series_schema": {
        "code": "class Validate:\n    def time_series_schema(self):\n        self.schema.validate(self.series)\n\n    def setup(self):\n        self.schema = SeriesSchema(\n                String,\n                checks=[\n                    Check(lambda s: s.str.startswith(\"foo\")),\n                    Check(lambda s: s.str.endswith(\"bar\")),\n                    Check(lambda x: len(x) > 3, element_wise=True)\n                    ],\n                nullable=False,\n                allow_duplicates=True,\n                name=\"my_series\")\n        self.series = pd.Series([\"foobar\", \"foobar\", \"foobar\"],\n                                name=\"my_series\")",
        "min_run_count": 2,
        "name": "series_schema.Validate.time_series_schema",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "600cc36ac19c30710095722d4090e9c2c3f00be7945ba8ef3655a7b2ebb9c4e3",
        "warmup_time": -1
    },
    "version": 2
}